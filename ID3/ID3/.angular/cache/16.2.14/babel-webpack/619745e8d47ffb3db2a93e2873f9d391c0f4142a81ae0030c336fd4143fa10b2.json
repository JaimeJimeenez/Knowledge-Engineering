{"ast":null,"code":"export class Dataset {\n  constructor(attributes, examples, copy) {\n    this._attributes = [];\n    this._resultName = '';\n    if (examples !== undefined) this._examples = examples;else this._examples = copy.examples;\n    if (attributes !== undefined) {\n      this._attributes = attributes;\n      this._resultName = this._attributes[this._attributes.length - 1];\n      this._attributes = this._attributes.slice(0, -1);\n    } else {\n      this._attributes = copy.attributes;\n      this._resultName = copy.resultName;\n    }\n  }\n  get examples() {\n    return this._examples;\n  }\n  set examples(examples) {\n    this._examples = examples;\n  }\n  get attributes() {\n    return this._attributes;\n  }\n  set attributes(attributes) {\n    this._attributes = attributes;\n  }\n  get resultName() {\n    return this._resultName;\n  }\n  addExample(example) {\n    this._examples.push(example);\n  }\n  removeExample(example) {\n    this._examples = this._examples.filter(element => element !== example);\n  }\n  examplesWithValueInAttribute(attribute, value) {\n    const examples = [];\n    for (const example of this._examples) {\n      if (example.getValue(attribute) === value) examples.push(example);\n    }\n    return examples;\n  }\n  getNumberExamplesWithResult(value) {\n    let count = 0;\n    for (const example of this._examples) if (example.getValue(this._resultName) === value) count++;\n    return count;\n  }\n}","map":{"version":3,"names":["Dataset","constructor","attributes","examples","copy","_attributes","_resultName","undefined","_examples","length","slice","resultName","addExample","example","push","removeExample","filter","element","examplesWithValueInAttribute","attribute","value","getValue","getNumberExamplesWithResult","count"],"sources":["/Users/jimmyjimenez/Desktop/University/Ingeniería del Conocimiento/Knowledge-Engineering/ID3/ID3/src/app/lib/dataset.ts"],"sourcesContent":["import { Example } from \"./example\";\n\nexport class Dataset {\n\n  private _examples : Example[] | undefined;\n  private _attributes : string[] | undefined = [];\n  private _resultName : string  = '';\n\n  constructor(attributes? : string[], examples? : Example[], copy? : Dataset) {\n    if (examples !== undefined)\n      this._examples = examples;\n    else\n      this._examples = copy!.examples;\n\n    if (attributes !== undefined) {\n      this._attributes = attributes;\n      this._resultName = this._attributes[this._attributes.length - 1];\n      this._attributes = this._attributes.slice(0, -1);\n    }\n    else {\n      this._attributes = copy!.attributes;\n      this._resultName = copy!.resultName;\n    }\n  }\n\n  get examples() : Example[] | undefined {\n    return this._examples;\n  }\n\n  set examples(examples : Example[]) {\n    this._examples = examples;\n  }\n\n  get attributes() : string[] | undefined{\n    return this._attributes;\n  }\n\n  set attributes(attributes : string[]) {\n    this._attributes = attributes;\n  }\n\n  get resultName() : string {\n    return this._resultName;\n  }\n\n  addExample(example : Example) : void {\n    this._examples!.push(example);\n  }\n\n  removeExample(example : Example) : void {\n    this._examples = this._examples!.filter((element) => element !== example);\n  }\n\n  examplesWithValueInAttribute(attribute : string, value : string) {\n    const examples : Example[] = [];\n    for (const example of this._examples!) {\n      if (example.getValue(attribute) === value)\n        examples.push(example);\n    }\n    return examples;\n  }\n\n  getNumberExamplesWithResult(value : string) {\n    let count = 0;\n    for (const example of this._examples!)\n      if (example.getValue(this._resultName) === value)\n        count++;\n    return count;\n  }\n}\n"],"mappings":"AAEA,OAAM,MAAOA,OAAO;EAMlBC,YAAYC,UAAsB,EAAEC,QAAqB,EAAEC,IAAe;IAHlE,KAAAC,WAAW,GAA0B,EAAE;IACvC,KAAAC,WAAW,GAAa,EAAE;IAGhC,IAAIH,QAAQ,KAAKI,SAAS,EACxB,IAAI,CAACC,SAAS,GAAGL,QAAQ,CAAC,KAE1B,IAAI,CAACK,SAAS,GAAGJ,IAAK,CAACD,QAAQ;IAEjC,IAAID,UAAU,KAAKK,SAAS,EAAE;MAC5B,IAAI,CAACF,WAAW,GAAGH,UAAU;MAC7B,IAAI,CAACI,WAAW,GAAG,IAAI,CAACD,WAAW,CAAC,IAAI,CAACA,WAAW,CAACI,MAAM,GAAG,CAAC,CAAC;MAChE,IAAI,CAACJ,WAAW,GAAG,IAAI,CAACA,WAAW,CAACK,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;KACjD,MACI;MACH,IAAI,CAACL,WAAW,GAAGD,IAAK,CAACF,UAAU;MACnC,IAAI,CAACI,WAAW,GAAGF,IAAK,CAACO,UAAU;;EAEvC;EAEA,IAAIR,QAAQA,CAAA;IACV,OAAO,IAAI,CAACK,SAAS;EACvB;EAEA,IAAIL,QAAQA,CAACA,QAAoB;IAC/B,IAAI,CAACK,SAAS,GAAGL,QAAQ;EAC3B;EAEA,IAAID,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACG,WAAW;EACzB;EAEA,IAAIH,UAAUA,CAACA,UAAqB;IAClC,IAAI,CAACG,WAAW,GAAGH,UAAU;EAC/B;EAEA,IAAIS,UAAUA,CAAA;IACZ,OAAO,IAAI,CAACL,WAAW;EACzB;EAEAM,UAAUA,CAACC,OAAiB;IAC1B,IAAI,CAACL,SAAU,CAACM,IAAI,CAACD,OAAO,CAAC;EAC/B;EAEAE,aAAaA,CAACF,OAAiB;IAC7B,IAAI,CAACL,SAAS,GAAG,IAAI,CAACA,SAAU,CAACQ,MAAM,CAAEC,OAAO,IAAKA,OAAO,KAAKJ,OAAO,CAAC;EAC3E;EAEAK,4BAA4BA,CAACC,SAAkB,EAAEC,KAAc;IAC7D,MAAMjB,QAAQ,GAAe,EAAE;IAC/B,KAAK,MAAMU,OAAO,IAAI,IAAI,CAACL,SAAU,EAAE;MACrC,IAAIK,OAAO,CAACQ,QAAQ,CAACF,SAAS,CAAC,KAAKC,KAAK,EACvCjB,QAAQ,CAACW,IAAI,CAACD,OAAO,CAAC;;IAE1B,OAAOV,QAAQ;EACjB;EAEAmB,2BAA2BA,CAACF,KAAc;IACxC,IAAIG,KAAK,GAAG,CAAC;IACb,KAAK,MAAMV,OAAO,IAAI,IAAI,CAACL,SAAU,EACnC,IAAIK,OAAO,CAACQ,QAAQ,CAAC,IAAI,CAACf,WAAW,CAAC,KAAKc,KAAK,EAC9CG,KAAK,EAAE;IACX,OAAOA,KAAK;EACd","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
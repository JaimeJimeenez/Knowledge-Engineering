{"ast":null,"code":"import { Dataset } from \"./dataset\";\nimport { Node } from './node';\nexport class ID3 {\n  constructor() {\n    this._rules = [];\n  }\n  main(examples, attributes) {\n    const dataset = new Dataset(attributes, examples);\n    const node = new Node(dataset, null);\n    return this._execute(node);\n  }\n  _execute(root) {\n    if (root.subtable.examples?.length === 0) return null;\n    const result = root.subtable.examples[0].getValue(root.subtable.resultName);\n    const count = root.subtable.getNumberExamplesWithResult(result);\n    if (count === root.subtable.examples?.length) {\n      root.value = result;\n      return root;\n    }\n    if (root.subtable.attributes?.length === 0) console.log('La lista de atributos se encuentra vacía');else {\n      root.getBestAttribute();\n      root.calculateChildren();\n      for (let children of root.children) {\n        const temp = this._execute(children);\n        if (temp !== null) children = temp;\n      }\n    }\n    return root;\n  }\n  calculateRules(treeSolution) {\n    if (treeSolution.children.length === 0) {\n      if (treeSolution.isLeaf) {\n        const name = treeSolution.bestAttribute?.name;\n        const value = treeSolution.value === 'si' ? 'si' : 'no';\n        this._rules.push(['Siempre', name + ' = ' + value]);\n      }\n    } else {\n      for (const children of treeSolution.children) this._in_depthTour(children, [], treeSolution.bestAttribute.name);\n    }\n    return this._rules;\n  }\n  _in_depthTour(root, rule, fatherName) {\n    if (root.children.length === 0) {\n      if (root.isLeaf) {\n        rule.push(fatherName + ' = ' + root.fatherValue);\n        rule.push(root.subtable.resultName + ' = ' + root.value);\n        this._rules.push(rule);\n      }\n    } else {\n      rule.push(fatherName + ' = ' + root.fatherValue);\n      for (const children of root.children) this._in_depthTour(children, rule, root.bestAttribute.name);\n    }\n  }\n  checkExample(example, tree) {\n    if (tree.isLeaf) return tree.value;else for (const node of tree.children) if (example.findIndex(value => value === node.fatherValue)) return this.checkExample(example, node);\n    return \"\";\n  }\n}","map":{"version":3,"names":["Dataset","Node","ID3","constructor","_rules","main","examples","attributes","dataset","node","_execute","root","subtable","length","result","getValue","resultName","count","getNumberExamplesWithResult","value","console","log","getBestAttribute","calculateChildren","children","temp","calculateRules","treeSolution","isLeaf","name","bestAttribute","push","_in_depthTour","rule","fatherName","fatherValue","checkExample","example","tree","findIndex"],"sources":["/Users/jimmyjimenez/Desktop/University/Ingeniería del Conocimiento/Knowledge-Engineering/ID3/ID3/src/app/lib/id3.ts"],"sourcesContent":["import { Dataset } from \"./dataset\";\nimport { Example } from \"./example\";\nimport { Node } from './node';\n\nexport class ID3 {\n\n  private _rules : string[][] = [];\n\n  main(examples : Example[], attributes : string[]) {\n    const dataset : Dataset = new Dataset(attributes, examples);\n    const node : Node = new Node(dataset, null);\n    return this._execute(node);\n  }\n\n  private _execute(root : Node) {\n    if (root.subtable.examples?.length === 0)\n      return null;\n\n    const result : string = root.subtable.examples![0].getValue(root.subtable.resultName);\n    const count : number = root.subtable.getNumberExamplesWithResult(result);\n    if (count === root.subtable.examples?.length) {\n      root.value = result;\n      return root;\n    }\n\n    if (root.subtable.attributes?.length === 0)\n      console.log('La lista de atributos se encuentra vacía');\n    else {\n      root.getBestAttribute();\n      root.calculateChildren();\n      for (let children of root.children) {\n        const temp = this._execute(children)\n        if (temp !== null)\n          children = temp;\n      }\n    }\n    return root;\n  }\n\n  calculateRules(treeSolution : Node) {\n    if (treeSolution.children.length === 0) {\n      if (treeSolution.isLeaf) {\n        const name = treeSolution.bestAttribute?.name\n        const value = treeSolution.value === 'si' ? 'si' : 'no';\n        this._rules.push(['Siempre', name + ' = ' + value]);\n      }\n    } else {\n      for (const children of treeSolution.children)\n        this._in_depthTour(children, [], treeSolution.bestAttribute!.name);\n    }\n\n    return this._rules;\n  }\n\n  private _in_depthTour(root : Node, rule : string[], fatherName : string) : void {\n    if (root.children.length === 0) {\n      if (root.isLeaf) {\n        rule.push(fatherName + ' = ' + root.fatherValue);\n        rule.push(root.subtable.resultName + ' = ' + root.value);\n        this._rules.push(rule);\n      }\n    } else {\n      rule.push(fatherName + ' = ' + root.fatherValue);\n      for (const children of root.children)\n        this._in_depthTour(children, rule, root.bestAttribute!.name);\n    }\n  }\n\n  checkExample(example : string[], tree : Node) : string {\n    if (tree.isLeaf)\n      return tree.value!;\n    else\n      for (const node of tree.children)\n        if (example.findIndex((value) => value === node.fatherValue))\n          return this.checkExample(example, node);\n    return \"\";\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}
{"ast":null,"code":"import { Attribute } from \"./attribute\";\nimport { Dataset } from \"./dataset\";\nexport class Node {\n  constructor(data, value) {\n    this._isLeaf = false;\n    this._children = [];\n    this._value = null;\n    this._fatherValue = '';\n    this._attributes = [];\n    this._subtable = data;\n    if (value !== null) {\n      this._value = value;\n      this._isLeaf = true;\n    }\n    this._initializaAttributes();\n  }\n  _initializaAttributes() {\n    const names = this._subtable.attributes;\n    for (let name of names) this._attributes.push(new Attribute(name, this._subtable));\n  }\n  getBestAttribute() {\n    this._bestAttribute = this._attributes[0];\n    for (let i = 1; i < this._attributes.length; i++) if (this._bestAttribute.merit > this._attributes[i].merit) this._bestAttribute = this._attributes[i];\n  }\n  calculateChildren() {\n    for (const value of this._bestAttribute.values.keys()) {\n      const dataset = new Dataset(undefined, undefined, this._subtable);\n      dataset.examples = dataset.examplesWithValueInAttribute(this._bestAttribute.name, value);\n      const node = new Node(dataset, null);\n      node.fatherValue = value;\n      node.attributes = node.removeAttribute(this._bestAttribute);\n      node.subtable.attributes = node.getAttributesNames();\n      this._children.push(node);\n    }\n    for (const node of this._children) {\n      node._eraseAttribute(this._bestAttribute.name);\n    }\n  }\n  _eraseAttribute(name) {\n    for (let i = 0; i < this._attributes.length; i++) if (this._attributes[i].name === name) this._attributes.splice(i, 1);\n    for (const example of this._subtable.examples) example.removeAttribute(name);\n  }\n  get fatherValue() {\n    return this._fatherValue;\n  }\n  set fatherValue(value) {\n    this._fatherValue = value;\n  }\n  get attributes() {\n    return this._attributes;\n  }\n  set attributes(attributes) {\n    this._attributes = attributes;\n  }\n  get subtable() {\n    return this._subtable;\n  }\n  get value() {\n    return this._value;\n  }\n  set value(value) {\n    this._value = value;\n    this._isLeaf = true;\n  }\n  get children() {\n    return this._children;\n  }\n  get isLeaf() {\n    return this._isLeaf;\n  }\n  get bestAttribute() {\n    return this._bestAttribute;\n  }\n  removeAttribute(attribute) {\n    return this._attributes.filter(element => attribute.name !== element.name);\n  }\n  getAttributesNames() {\n    const names = [];\n    for (const attribute of this._attributes) {\n      const name = attribute.name;\n      names.push(name);\n    }\n    return names;\n  }\n}","map":{"version":3,"names":["Attribute","Dataset","Node","constructor","data","value","_isLeaf","_children","_value","_fatherValue","_attributes","_subtable","_initializaAttributes","names","attributes","name","push","getBestAttribute","_bestAttribute","i","length","merit","calculateChildren","values","keys","dataset","undefined","examples","examplesWithValueInAttribute","node","fatherValue","removeAttribute","subtable","getAttributesNames","_eraseAttribute","splice","example","children","isLeaf","bestAttribute","attribute","filter","element"],"sources":["/Users/jimmyjimenez/Desktop/University/IngenieriÃÅa del Conocimiento/Knowledge-Engineering/ID3/ID3/src/app/lib/node.ts"],"sourcesContent":["import { Attribute } from \"./attribute\";\nimport { Dataset } from \"./dataset\";\n\nexport class Node {\n\n  private _subtable : Dataset\n  private _isLeaf : boolean = false;\n  private _children : Node[] = [];\n  private _value : string | null = null;\n  private _fatherValue : string = '';\n  private _attributes : Attribute[] = [];\n  private _bestAttribute : Attribute | undefined;\n\n  constructor(data : Dataset, value : string | null) {\n    this._subtable = data;\n    if (value !== null) {\n      this._value = value;\n      this._isLeaf = true;\n    }\n    this._initializaAttributes();\n  }\n\n  private _initializaAttributes() : void {\n    const names = this._subtable.attributes;\n    for (let name of names!)\n      this._attributes.push(new Attribute(name, this._subtable));\n  }\n\n  getBestAttribute() : void {\n    this._bestAttribute = this._attributes[0];\n    for (let i = 1; i < this._attributes.length; i++)\n      if (this._bestAttribute.merit > this._attributes[i].merit)\n        this._bestAttribute = this._attributes[i];\n  }\n\n  calculateChildren() : void {\n    for (const value of this._bestAttribute!.values.keys()) {\n      const dataset : Dataset = new Dataset(undefined, undefined, this._subtable);\n      dataset.examples = dataset.examplesWithValueInAttribute(this._bestAttribute!.name, value);\n\n      const node : Node = new Node(dataset, null);\n      node.fatherValue = value;\n      node.attributes = node.removeAttribute(this._bestAttribute!);\n      node.subtable.attributes = node.getAttributesNames();\n      this._children.push(node);\n    }\n\n    for (const node of this._children) {\n      node._eraseAttribute(this._bestAttribute!.name);\n    }\n  }\n\n  private _eraseAttribute(name : string) {\n    for (let i = 0; i < this._attributes.length; i++)\n      if (this._attributes[i].name === name)\n        this._attributes.splice(i, 1);\n\n    for (const example of this._subtable.examples!)\n      example.removeAttribute(name);\n  }\n\n  get fatherValue() : string {\n    return this._fatherValue;\n  }\n\n  set fatherValue(value : string) {\n    this._fatherValue = value;\n  }\n\n  get attributes() : Attribute[] {\n    return this._attributes;\n  }\n\n  set attributes(attributes : Attribute[]) {\n    this._attributes = attributes;\n  }\n\n  get subtable() : Dataset {\n    return this._subtable;\n  }\n\n  get value() : string | null {\n    return this._value;\n  }\n\n  set value(value : string) {\n    this._value = value;\n    this._isLeaf = true;\n  }\n\n  get children() : Node[] {\n    return this._children;\n  }\n\n  get isLeaf() : boolean {\n    return this._isLeaf;\n  }\n\n  get bestAttribute() : Attribute | undefined {\n    return this._bestAttribute;\n  }\n\n  removeAttribute(attribute : Attribute) {\n    return this._attributes.filter(element => attribute.name !== element.name);\n  }\n\n  getAttributesNames() {\n    const names : string[] = [];\n    for (const attribute of this._attributes) {\n      const name = attribute.name;\n      names.push(name);\n    }\n    return names;\n  }\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}